---
#install zabbix - centos 7.5 with enabled SELinux
- hosts: all
  become: yes
  vars:
   mysql_root_password: enter@your@password111
   mysql_zabbix_password: enter@your@password123 
  tasks: 
    - name: Update all packages
      yum:
        name: "*"
        update_cache: yes
        state: latest
    - name: Add repository - zabbix 3.4.2
      #https://docs.ansible.com/ansible/latest/modules/yum_module.html
      #However, if one of the packages adds a new yum repository 
      #that the other packages come from (such as epel-release) 
      #then that package needs to be installed in a separate task. This mimics yumâ€™s command line behaviour.
      yum:
        name: https://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm
        state: present 
   
    - name: Ensure a list of packages installed
      yum:
        name: "{{ packages }}"
        state: latest
        update_cache: yes
      vars:
        packages:
        - yum-utils
        - httpd
        - curl
        - vim
        - mc
        - mariadb-server
        - policycoreutils-python
        - setroubleshoot 
        - setroubleshoot-server
        - MySQL-python
        - libsemanage-python
        - libselinux-python
        

    - name: Zabbix frontend additional packages enable repository of optional rpms
      shell: yum-config-manager --enable rhel-7-server-optional-rpms
    - name: Install zabbix
      yum:
        name: "{{ zbx_packages }}"
        state: present
      vars:
        zbx_packages:
        - zabbix-server-mysql
        - zabbix-web-mysql
        - zabbix-agent
    - name: Services enabled
      service:
       name: "{{ enabled_items }}"
       enabled: yes
      vars:
       enebled_items:
       - mariadb-server
       - httpd
       - zabbix-server
       - zabbix-agent
    - name: Services start
      service:
       name: "{{ started_items }}"
       state: started
      vars:
       started_items:
       - mariadb-server
       - httpd
       - zabbix-server
       - zabbix-agent
    - name: Services restart
      service:
       name: "{{ restart_items }}"
       state: reloaded
      vars:
       restart_items:
       - auditd
       - httpd
    - name: Database changes
    #https://stackoverflow.com/questions/25136498/ansible-answers-to-mysql-secure-installation
      yum: name=MySQL-python state=present
      when: ansible_os_family == 'RedHat'
    - name: Deletes anonymous MySQL server user for localhos
      mysql_user: user="" state="absent"  
    - name: Secures the MySQL root user - disallow root login remotely
      mysql_user: user="root" password="{{ mysql_root_password }}" host="{{root_host_list}}"
      vars:
        root_host_list:
        - ::1
        - localhost
        - 127.0.0.1
    - name: Removes the MySQL test database
      mysql_db: db=test state=absent  
    - name: Sets the root password 
      mysql_user: user=root password="{{ mysql_root_password }}" host=localhost
    - name: Create zabbix database
      mysql_db: db=zabbix state=present encoding=utf8
      login_user: root 
      login_password: "{{ mysql_root_password }}"
    - name: Create zabbix db user "zabbix"
      login_user: root 
      login_password: "{{ mysql_root_password }}"
      mysql_user: name=zabbix password="{{ mysql_zabbix_password }}" priv="zabbix.*:ALL" state=present
    - name: Restore database from backup/template
      login_user: root 
      login_password: "{{ mysql_root_password }}"
      mysql_db: name=zabbix state=import target=/usr/share/doc/zabbix-server-mysql*/create.sql.gz
    - name: Configure database for Zabbix server
      template: src=/templates/zabbix_server_conf.j2 dest={{zabbix_conf_path}} 
                owner=root group=zabbix mode=0640 backup=yes
    - name: Zabbix frontend configuration - apache
      template: src=/templates/zabbix_httpd_conf.j2 dest={{zabbix_httpd_conf_path}}
                owner=root group=root mode=0644 backup=yes
                validate:='httpd -t -f %s' #https://www.blue-bag.com/blog/testing-configuration-files-they-go-live-ansible 
      when:  httpd_result|success
  
      notify:
      - restart httpd
    - name: Enable zabbix_can_network SELinux boolean
      seboolean:
        name: zabbix_can_network
        state: yes
        persistent: yes
    - name: Enable httpd_can_connect_zabbix SELinux boolean
      seboolean:
        name: httpd_can_connect_zabbix
        state: yes
        persistent: yes
    - name: Enable httpd_can_network_connect_db SELinux boolean
      seboolean:
        name: httpd_can_network_connect_db
        state: yes
        persistent: yes    
    - name: Resolving issue > "python SELinux is preventing /usr/sbin/zabbix_server_mysql from unlink access 
            on the sock_file zabbix_server_preprocessing.sock.#012#012*****  |
            Plugin catchall (100. confidence) suggests   **************************#012#012|
            If you believe that zabbix_server_mysql should be allowed unlink access on 
            the zabbix_server_preprocessing.sock sock_file by default.#012Then you should report this as a 
            bug.#012You can generate a local policy module to allow this access.#012Do#012allow this access 
            for now by executing:#012# 
            ausearch -c 'zabbix_server' --raw | audit2allow -M my-zabbixserver#012# 
            semodule -i my-zabbixserver.pp#012"
      shell: ausearch -c 'zabbix_server' --raw | audit2allow -M my-zabbixserver && semodule -i my-zabbixserver.pp
      